@RULE NaiveXEmulated
********************************
**** COMPILED FROM NUTSHELL ****
****         v0.6.2         ****
********************************

A generic ruletable to emulate Naive rules.

1: A cell that always moves northwest, spawning ScanOff cells, to allow infinite patterns.
2: A boundary cell that continually respawns ScanOff cells if one is nearby it.
3: Cell that propagates to the east and south to ScanOff a pattern, marking one emulated tick.
4:+2.. The Naive rule's On states.
5:+2.. An On cell that is currently being read by a ScanOff cell.


@TABLE
neighborhood: Moore
symmetries: none
n_states: 6

var any.0 = {0,1,2,3,4,5}
var any.1 = any.0
var any.2 = any.0
var any.3 = any.0
var any.4 = any.0
var any.5 = any.0
var any.6 = any.0
var any.7 = any.0
var _a0.0 = {4,5}
var _a0.1 = _a0.0
var _a0.2 = _a0.0
var _b0.0 = {0,3}
var _b0.1 = _b0.0
var _b0.2 = _b0.0
var _b0.3 = _b0.0
var _b0.4 = _b0.0
var _b0.5 = _b0.0
var _e0.0 = {3,5}
var _f0.0 = {0,1,2,3,4,5}
var _f0.1 = _f0.0
var _f0.2 = _f0.0
var _f0.3 = _f0.0
var _f0.4 = _f0.0
var _f0.5 = _f0.0
var _f0.6 = _f0.0
var _f0.7 = _f0.0
var _g0.0 = {0,1,2,3,5}

# Don't touch this
# Or this
# Birth; REPLACE THE 3 BELOW
#### line 25: 3, <3 / (4, 5) / (0, 3, deathStates)>; 4 ####
3, _a0.0, _a0.1, _b0.0, _b0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
3, _a0.0, _b0.0, _a0.1, _b0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
3, _a0.0, _b0.0, _a0.1, _a0.2, _b0.1, _b0.2, _b0.3, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _a0.1, _a0.2, _b0.4, 4
3, _b0.0, _a0.0, _a0.1, _b0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _b0.4, _a0.1, _a0.2, 4
3, _b0.0, _b0.1, _a0.0, _b0.2, _a0.1, _a0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _a0.0, _a0.1, _b0.3, _a0.2, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _a0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
3, _b0.0, _a0.0, _b0.1, _a0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
3, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _a0.1, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _b0.1, _b0.2, _a0.1, _b0.3, _b0.4, _a0.2, 4
3, _a0.0, _a0.1, _b0.0, _b0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _a0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _a0.1, _b0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _b0.4, _a0.1, _a0.2, 4
3, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _a0.1, _a0.2, _b0.4, 4
3, _b0.0, _b0.1, _a0.0, _a0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _b0.1, _b0.2, _a0.1, _a0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _a0.0, _a0.1, _b0.3, _b0.4, _a0.2, 4
3, _a0.0, _a0.1, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _a0.1, _a0.2, _b0.1, _b0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.0, _a0.1, _a0.2, 4
3, _b0.0, _b0.1, _b0.2, _a0.0, _a0.1, _a0.2, _b0.3, _b0.4, 4
3, _a0.0, _a0.1, _a0.2, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.1, _a0.2, 4
3, _b0.0, _b0.1, _a0.0, _a0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _a0.1, _a0.2, _b0.4, 4
3, _a0.0, _b0.0, _a0.1, _b0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _a0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
3, _b0.0, _a0.0, _b0.1, _b0.2, _a0.1, _b0.3, _a0.2, _b0.4, 4
3, _b0.0, _b0.1, _a0.0, _b0.2, _a0.1, _b0.3, _b0.4, _a0.2, 4
3, _a0.0, _b0.0, _a0.1, _b0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _b0.2, _a0.1, _b0.3, _a0.2, _b0.4, 4
3, _a0.0, _b0.0, _a0.1, _b0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
3, _b0.0, _b0.1, _a0.0, _b0.2, _a0.1, _b0.3, _a0.2, _b0.4, 4
3, _a0.0, _a0.1, _b0.0, _a0.2, _b0.1, _b0.2, _b0.3, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _a0.1, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _a0.1, _b0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.1, _a0.2, 4
3, _b0.0, _a0.0, _b0.1, _a0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _a0.1, _b0.4, _a0.2, 4
3, _b0.0, _b0.1, _a0.0, _a0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _a0.1, _a0.2, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _a0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _b0.2, _a0.1, _a0.2, _b0.3, _b0.4, 4
3, _a0.0, _a0.1, _b0.0, _b0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
3, _a0.0, _b0.0, _b0.1, _b0.2, _a0.1, _b0.3, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _a0.1, _b0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
3, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _b0.4, _a0.1, _a0.2, 4
3, _b0.0, _b0.1, _a0.0, _a0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
3, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _a0.1, _a0.2, _b0.4, 4
3, _b0.0, _a0.0, _b0.1, _a0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
3, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _a0.1, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _b0.1, _a0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
3, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _a0.1, _b0.4, _a0.2, 4
# Survival; REPLACE THE 23 BELOW
#### line 28: 5, <23 / (4, 5) / (0, 3, deathStates)>; 4 ####
5, _a0.0, _b0.0, _b0.1, _b0.2, _a0.1, _b0.3, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _b0.4, _a0.1, _b0.5, 4
5, _a0.0, _b0.0, _a0.1, _b0.1, _b0.2, _b0.3, _b0.4, _b0.5, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.1, _b0.5, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _a0.1, _b0.3, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _b0.4, _a0.1, _b0.5, 4
5, _a0.0, _b0.0, _b0.1, _a0.1, _b0.2, _b0.3, _b0.4, _b0.5, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _a0.1, _b0.4, _b0.5, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _a0.1, _b0.3, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _b0.4, _b0.5, _a0.1, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.1, _b0.5, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _b0.4, _b0.5, _a0.1, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _a0.1, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _b0.4, _a0.1, _b0.5, 4
5, _a0.0, _a0.1, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _b0.5, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _b0.5, _a0.1, 4
5, _b0.0, _a0.0, _a0.1, _b0.1, _b0.2, _b0.3, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _b0.5, _a0.0, _a0.1, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _a0.1, _b0.3, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _a0.1, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _a0.0, _a0.1, _b0.2, _b0.3, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.0, _a0.1, _b0.5, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _a0.1, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _b0.4, _b0.5, _a0.1, 4
5, _b0.0, _a0.0, _b0.1, _a0.1, _b0.2, _b0.3, _b0.4, _b0.5, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.0, _b0.5, _a0.1, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _b0.4, _b0.5, _a0.1, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _a0.1, _b0.4, _b0.5, 4
5, _a0.0, _a0.1, _b0.0, _b0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
5, _a0.0, _b0.0, _a0.1, _b0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
5, _a0.0, _b0.0, _a0.1, _a0.2, _b0.1, _b0.2, _b0.3, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _a0.1, _a0.2, _b0.4, 4
5, _b0.0, _a0.0, _a0.1, _b0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _b0.4, _a0.1, _a0.2, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _a0.1, _a0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _a0.1, _b0.3, _a0.2, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _a0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
5, _b0.0, _a0.0, _b0.1, _a0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _a0.1, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _a0.1, _b0.3, _b0.4, _a0.2, 4
5, _a0.0, _a0.1, _b0.0, _b0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _a0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _a0.1, _b0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _b0.4, _a0.1, _a0.2, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _a0.1, _a0.2, _b0.4, 4
5, _b0.0, _b0.1, _a0.0, _a0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _a0.1, _a0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _a0.1, _b0.3, _b0.4, _a0.2, 4
5, _a0.0, _a0.1, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _a0.1, _a0.2, _b0.1, _b0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.0, _a0.1, _a0.2, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _a0.1, _a0.2, _b0.3, _b0.4, 4
5, _a0.0, _a0.1, _a0.2, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.1, _a0.2, 4
5, _b0.0, _b0.1, _a0.0, _a0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _a0.1, _a0.2, _b0.4, 4
5, _a0.0, _b0.0, _a0.1, _b0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _a0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _a0.1, _b0.3, _a0.2, _b0.4, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _a0.1, _b0.3, _b0.4, _a0.2, 4
5, _a0.0, _b0.0, _a0.1, _b0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _a0.1, _b0.3, _a0.2, _b0.4, 4
5, _a0.0, _b0.0, _a0.1, _b0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _a0.1, _b0.3, _a0.2, _b0.4, 4
5, _a0.0, _a0.1, _b0.0, _a0.2, _b0.1, _b0.2, _b0.3, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _b0.3, _a0.1, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _a0.1, _b0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _b0.4, _a0.1, _a0.2, 4
5, _b0.0, _a0.0, _b0.1, _a0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _b0.3, _a0.0, _a0.1, _b0.4, _a0.2, 4
5, _b0.0, _b0.1, _a0.0, _a0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _a0.1, _a0.2, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _a0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _a0.1, _a0.2, _b0.3, _b0.4, 4
5, _a0.0, _a0.1, _b0.0, _b0.1, _a0.2, _b0.2, _b0.3, _b0.4, 4
5, _a0.0, _b0.0, _b0.1, _b0.2, _a0.1, _b0.3, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _a0.1, _b0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _b0.4, _a0.1, _a0.2, 4
5, _b0.0, _b0.1, _a0.0, _a0.1, _b0.2, _b0.3, _a0.2, _b0.4, 4
5, _b0.0, _b0.1, _a0.0, _b0.2, _b0.3, _a0.1, _a0.2, _b0.4, 4
5, _b0.0, _a0.0, _b0.1, _a0.1, _b0.2, _a0.2, _b0.3, _b0.4, 4
5, _b0.0, _b0.1, _b0.2, _a0.0, _b0.3, _a0.1, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _b0.1, _a0.1, _b0.2, _b0.3, _b0.4, _a0.2, 4
5, _b0.0, _a0.0, _b0.1, _b0.2, _b0.3, _a0.1, _b0.4, _a0.2, 4
# Death otherwise
#### line 31: allScanOn, N..NW any; [0: ((allOn << 1) - 4, 0)] ####
5, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 0
# Scanner-cell logic
#### line 34: 2, N..NW any; 2 ####
2, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 2
#### line 35: 1, N..NW any; 0 ####
1, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 0
#### line 35: NW:1 ####
any.0, any.1, any.2, any.3, 1, any.4, any.5, any.6, any.7, 1
#### line 35: E:3 ####
any.0, any.1, any.2, any.3, any.4, any.5, any.6, 1, any.7, 3
#### line 35: SW:3 ####
any.0, any.1, 1, any.2, any.3, any.4, any.5, any.6, any.7, 3
#### line 36: (3, allScanOn), N..NW (allOn, --allOn); 0 ####
_e0.0, _f0.0, _f0.1, _f0.2, _f0.3, _f0.4, _f0.5, _f0.6, _f0.7, 0
#### line 36: E[(allScanOn, 3, ...)] ####
4, _f0.0, any.0, any.1, any.2, _f0.1, _f0.2, _e0.0, _f0.3, 5
_g0.0, _f0.0, any.0, any.1, any.2, _f0.1, _f0.2, _e0.0, _f0.3, 3
#### line 36: SW:3 ####
_f0.0, _f0.1, _e0.0, _f0.2, any.0, any.1, any.2, any.3, any.4, 3
#### line 37: 0, N 2, SE 3; 3 ####
0, 2, any.0, any.1, 3, any.2, any.3, any.4, any.5, 3

@COLORS
0 48 48 48
4 255 255 255
3 0 0 0
5 160 160 160
1 0 255 0
2 255 0 0
