@RULE bct
********************************
**** COMPILED FROM NUTSHELL ****
****         v0.6.2         ****
********************************
An implementation of bitwise cyclic tag.

0: Vacuum.

1: Data-tape 0.
2: Data-tape 1.

3: Program-tape 0.
4: Program-tape 1.

5: Shifter. Moves both itself and the data tape one unit down to render program execution cyclic.

6: Transitory program-tape 0.
7: Transitory program-tape 1.

8: Pre-copying program-tape 0. (Used when a prgm-tape bit is the x in a 1x instruction)
9: Pre-copying program-tape 1. (Ditto)

10: Transitory program-tape 0.
11: Transitory program-tape 1.

12: Rightward-moving data-tape 0.
13: Rightward-moving data-tape 1.

14: Transitory reflector.
15: Ditto but about to turn into normal reflector.

16: To-be-moved-down data-tape 0.
17: To-be-moved-down data-tape 1.


@COLORS
3 200 200 200
4 90 90 90
1 235 235 235
12 235 235 235
16 235 235 235
2 30 30 30
13 30 30 30
17 30 30 30
5 0 255 255
14 0 255 255
15 0 255 255

@TABLE
neighborhood: Moore
symmetries: none
n_states: 18

var any.0 = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}
var any.1 = any.0
var any.2 = any.0
var any.3 = any.0
var any.4 = any.0
var any.5 = any.0
var any.6 = any.0
var any.7 = any.0
var data.0 = {1,2}
var data.1 = data.0
var rdata.0 = {12,13}
var ddata.0 = {16,17}
var vacdata.0 = {0,1,2}
var vacdata.1 = vacdata.0
var vacrdata.0 = {0,12,13}
var vacddata.0 = {0,16,17}
var _a0.0 = {14,15}
var _b0.0 = {10,11}

## If a shifter is encountered, reflect + shift data tape down 2 cells
# go right
#### line 50: vacddata, (1, 2), NE..W any, 5; [N: (16, 17)] ####
vacddata.0, 1, any.0, any.1, any.2, any.3, any.4, any.5, 5, 16
vacddata.0, 2, any.0, any.1, any.2, any.3, any.4, any.5, 5, 17
#### line 51: ddata, 0, NE..W any, 5; 0 ####
ddata.0, 0, any.0, any.1, any.2, any.3, any.4, any.5, 5, 0
# pull down
#### line 53: vacrdata, (16, 17), NE..NW any; [N: (12, 13)] ####
vacrdata.0, 16, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 12
vacrdata.0, 17, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 13
# go left
#### line 55: vacdata, (12, 13), 5, E..NW any; [N: (1, 2)] ####
vacdata.0, 12, 5, any.0, any.1, any.2, any.3, any.4, any.5, 1
vacdata.0, 13, 5, any.0, any.1, any.2, any.3, any.4, any.5, 2
# Move rightward-moving data to the right
#### line 58: vacrdata, W rdata, NW..SW any; [W] ####
vacrdata.0, any.0, any.1, any.2, any.3, any.4, any.5, rdata.0, any.6, rdata.0
#### line 59: rdata, W 0, NW..SW any; 0 ####
rdata.0, any.0, any.1, any.2, any.3, any.4, any.5, 0, any.6, 0
## shift the shifter down two as well
# right
#### line 63: 0, 5, NE..SW any, 0, rdata; 14 ####
0, 5, any.0, any.1, any.2, any.3, any.4, 0, rdata.0, 14
# left
#### line 65: 0, 5, data, 0, SE..NW any; 14 ####
0, 5, data.0, 0, any.0, any.1, any.2, any.3, any.4, 14
# finally
#### line 67: (14, 15), N..NW any; 0 ####
_a0.0, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 0
#### line 67: S[0: (15, 5)] ####
any.0, 14, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 15
any.0, 15, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 5
# delete shifter at end of its input stream
#### line 69: 5, SE ddata, S..E 0; 0 ####
5, 0, 0, 0, ddata.0, 0, 0, 0, 0, 0
#### line 70: 5, SW data, W..S 0; 0 ####
5, 0, 0, 0, 0, 0, data.0, 0, 0, 0
# Shift prgm tape down 1 if rightward data above it
#### line 73: (3, 4), rdata, NE..NW any; [0: (10, 11)] ####
3, rdata.0, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 10
4, rdata.0, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 11
# If a data bit has a shifter to its right, don't attempt to copy it
#### line 76: data, E 5, SE..NE any; 0 ####
data.0, any.0, any.1, 5, any.2, any.3, any.4, any.5, any.6, 0
# If a prgm-tape 1 is encountered, shift it downward
# and append the command to its left (by copying+shifting down) onto the right end of the data tape,
# if the leftmost bit is 1 -- otherwise just shift it down
# ----
# check the x in 1x
# leftmost bit 1?
#### line 84: (3, 4), NE 2, E 4, SE..N any; [0: (8, 9)] ####
3, any.0, 2, 4, any.1, any.2, any.3, any.4, any.5, 8  # copy+shift down
4, any.0, 2, 4, any.1, any.2, any.3, any.4, any.5, 9
# ----
# leftmost bit 0?
#### line 87: (3, 4), NE 1, E 4, SE..N any; [0: (6, 7)] ####
3, any.0, 1, 4, any.1, any.2, any.3, any.4, any.5, 6  # just shift down
4, any.0, 1, 4, any.1, any.2, any.3, any.4, any.5, 7
# ----
# shift the 1 in 1x down
#### line 90: 4, data, NE..NW any; 7 ####
4, data.0, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 7
#### line 91: 7, N..NW any; 0 ####
7, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 0
#### line 91: S[(11, _, ...)] ####
0, 7, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 11
# ----
# state 8 becomes state 1 and below it state 3
#### line 94: 8, N..NW any; 1 ####
8, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 1
#### line 94: S[(10, _, ...)] ####
0, 8, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 10
# state 9 becomes state 2 and below it state 4
#### line 96: 9, N..NW any; 2 ####
9, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 2
#### line 96: S[(11, _, ...)] ####
0, 9, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 11
# ----
# states 10 and 11 become 3 and 4 moving down
#### line 99: (10, 11), N..NW any; 0 ####
_b0.0, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 0
#### line 99: S[0: (3, 4)] ####
any.0, 10, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 3
any.0, 11, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 4
# If a bit of data has reached the right end of the tape, append it
# and delete the waiting data
#### line 103: data, E 0, SE any, S data, SW..NE any; [S] ####
data.0, any.0, any.1, 0, any.2, data.1, any.3, any.4, any.5, data.1
# next line accounts for single-item data tape being appended to
#### line 105: data, E 0, SE data, S..NE any; [SE] ####
data.0, any.0, any.1, 0, data.1, any.2, any.3, any.4, any.5, data.1
#### line 106: data, data, 0, E..NW any; 0 ####
data.0, data.1, 0, any.0, any.1, any.2, any.3, any.4, any.5, 0
# If a prgm-tape 0 is encountered, shift it down and delete the leftmost data-tape bit
#### line 109: 3, data, NE..NW any; 6 ####
3, data.0, any.0, any.1, any.2, any.3, any.4, any.5, any.6, 6
#### line 110: 6, N..NW any; 0 ####
6, any.0, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 0  # 3
#### line 110: S:10 ####
any.0, 6, any.1, any.2, any.3, any.4, any.5, any.6, any.7, 10  # 3
# Delete the leftmost bit if a program-tape 0 is encountered
#### line 113: 0, E data, SE 3, S..NE any; 0 ####
0, any.0, any.1, data.0, 3, any.2, any.3, any.4, any.5, 0
# Keep a data-tape bit in place if it's waiting below the data tape (to prepare for moving to the end)
#### line 116: data, data, NE..NW any; [0] ####
data.0, data.1, any.0, any.1, any.2, any.3, any.4, any.5, any.6, data.0
#### line 117: 0, data, any, data, SE..NW any; 0 ####
0, data.0, any.0, data.1, any.1, any.2, any.3, any.4, any.5, 0
# Move data tape to the left otherwise
#### line 120: 0, any, data, data, SE..NW any; 0 ####
0, any.0, data.0, data.1, any.1, any.2, any.3, any.4, any.5, 0
#### line 121: vacdata, E vacdata, SE..NE any; [E] ####
vacdata.0, any.0, any.1, vacdata.1, any.2, any.3, any.4, any.5, any.6, vacdata.1
